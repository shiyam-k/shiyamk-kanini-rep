// <auto-generated />
using System;
using Employee_Management_API.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Employee_Management_API.Migrations
{
    [DbContext(typeof(EmployeeManagementDBContext))]
    partial class EmployeeManagementDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DomainsProjectData", b =>
                {
                    b.Property<string>("ProjectDomainDomainId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProjectsProjectId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ProjectDomainDomainId", "ProjectsProjectId");

                    b.HasIndex("ProjectsProjectId");

                    b.ToTable("DomainsProjectData");
                });

            modelBuilder.Entity("Employee_Management_API.Models.Clients", b =>
                {
                    b.Property<string>("ClientId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ClientAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClientImgUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClientName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactPersonEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactPersonName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactPersonPhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PasswordHash")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .HasColumnType("varbinary(max)");

                    b.HasKey("ClientId");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("Employee_Management_API.Models.Domains", b =>
                {
                    b.Property<string>("DomainId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("DomainDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DomainName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DomainId");

                    b.ToTable("Domains");
                });

            modelBuilder.Entity("Employee_Management_API.Models.EmployeeData", b =>
                {
                    b.Property<string>("EmployeeId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("EmployeLastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmployeeDOB")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmployeeDOJ")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmployeeFirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("EmployeePasswordHash")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("EmployeePasswordSalt")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("EmployeeProfileImg")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmployeeQualifications")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SpecializationDomainId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("EmployeeId");

                    b.HasIndex("SpecializationDomainId");

                    b.ToTable("EmployeeData");
                });

            modelBuilder.Entity("Employee_Management_API.Models.EmployeeRole", b =>
                {
                    b.Property<string>("ERId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("EmployeesEmployeeId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ERId");

                    b.HasIndex("EmployeesEmployeeId");

                    b.HasIndex("RoleId");

                    b.ToTable("EmployeeRoles");
                });

            modelBuilder.Entity("Employee_Management_API.Models.LoginLogs", b =>
                {
                    b.Property<string>("SessionId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsLoggedIn")
                        .HasColumnType("bit");

                    b.Property<string>("LoginId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Token")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SessionId");

                    b.ToTable("LoginLogs");
                });

            modelBuilder.Entity("Employee_Management_API.Models.ProjEmployees", b =>
                {
                    b.Property<string>("PEID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProjectDataProjectId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProjectEmployeeEmployeeId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProjectsTLPTLID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("PEID");

                    b.HasIndex("ProjectDataProjectId");

                    b.HasIndex("ProjectEmployeeEmployeeId");

                    b.HasIndex("ProjectsTLPTLID");

                    b.ToTable("ProjectEmployees");
                });

            modelBuilder.Entity("Employee_Management_API.Models.ProjTL", b =>
                {
                    b.Property<string>("PTLID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProjectId1")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TLEmployeeId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("PTLID");

                    b.HasIndex("ProjectId1");

                    b.HasIndex("TLEmployeeId");

                    b.ToTable("ProjectTL");
                });

            modelBuilder.Entity("Employee_Management_API.Models.ProjectData", b =>
                {
                    b.Property<string>("ProjectId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ClientId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool?>("IsCreated")
                        .HasColumnType("bit");

                    b.Property<string>("ProjectDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProjectImg")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProjectTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProjectType")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProjectId");

                    b.HasIndex("ClientId");

                    b.ToTable("ProjectData");
                });

            modelBuilder.Entity("Employee_Management_API.Models.Roles", b =>
                {
                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RoleId");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Employee_Management_API.Models.Topic", b =>
                {
                    b.Property<string>("TopicId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TopicDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TopicName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TopicId");


                    b.ToTable("Topic");
                });

            modelBuilder.Entity("Employee_Management_API.Models.TopicsDomains", b =>
                {
                    b.Property<string>("DDID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("DomainId1")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TopicId1")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("DDID");

                    b.HasIndex("DomainId1");

                    b.HasIndex("TopicId1");

                    b.ToTable("TopicsDomains");
                });

            modelBuilder.Entity("DomainsProjectData", b =>
                {
                    b.HasOne("Employee_Management_API.Models.Domains", null)
                        .WithMany()
                        .HasForeignKey("ProjectDomainDomainId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Employee_Management_API.Models.ProjectData", null)
                        .WithMany()
                        .HasForeignKey("ProjectsProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Employee_Management_API.Models.EmployeeData", b =>
                {
                    b.HasOne("Employee_Management_API.Models.Domains", "Specialization")
                        .WithMany("Data")
                        .HasForeignKey("SpecializationDomainId");

                    b.Navigation("Specialization");
                });

            modelBuilder.Entity("Employee_Management_API.Models.EmployeeRole", b =>
                {
                    b.HasOne("Employee_Management_API.Models.EmployeeData", "Employees")
                        .WithMany("Employee_Roles")
                        .HasForeignKey("EmployeesEmployeeId");

                    b.HasOne("Employee_Management_API.Models.Roles", "Role")
                        .WithMany("Employee_Roles")
                        .HasForeignKey("RoleId");

                    b.Navigation("Employees");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Employee_Management_API.Models.ProjEmployees", b =>
                {
                    b.HasOne("Employee_Management_API.Models.ProjectData", null)
                        .WithMany("ProjectEmployees")
                        .HasForeignKey("ProjectDataProjectId");

                    b.HasOne("Employee_Management_API.Models.EmployeeData", "ProjectEmployee")
                        .WithMany()
                        .HasForeignKey("ProjectEmployeeEmployeeId");

                    b.HasOne("Employee_Management_API.Models.ProjTL", "ProjectsTL")
                        .WithMany()
                        .HasForeignKey("ProjectsTLPTLID");

                    b.Navigation("ProjectEmployee");

                    b.Navigation("ProjectsTL");
                });

            modelBuilder.Entity("Employee_Management_API.Models.ProjTL", b =>
                {
                    b.HasOne("Employee_Management_API.Models.ProjectData", "ProjectId")
                        .WithMany("ProjectsTLs")
                        .HasForeignKey("ProjectId1");

                    b.HasOne("Employee_Management_API.Models.EmployeeData", "TL")
                        .WithMany("ProjectsTL")
                        .HasForeignKey("TLEmployeeId");

                    b.Navigation("ProjectId");

                    b.Navigation("TL");
                });

            modelBuilder.Entity("Employee_Management_API.Models.ProjectData", b =>
                {
                    b.HasOne("Employee_Management_API.Models.Clients", "Client")
                        .WithMany("Projects")
                        .HasForeignKey("ClientId");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("Employee_Management_API.Models.Topic", b =>
                {
                    b.HasOne("Employee_Management_API.Models.Domains", null)
                        .WithMany("Departments")
                        .HasForeignKey("DomainsDomainId");
                });

            modelBuilder.Entity("Employee_Management_API.Models.TopicsDomains", b =>
                {
                    b.HasOne("Employee_Management_API.Models.Domains", "DomainId")
                        .WithMany("TopicDomains")
                        .HasForeignKey("DomainId1");

                    b.HasOne("Employee_Management_API.Models.Topic", "TopicId")
                        .WithMany("TopicDomains")
                        .HasForeignKey("TopicId1");

                    b.Navigation("DomainId");

                    b.Navigation("TopicId");
                });

            modelBuilder.Entity("Employee_Management_API.Models.Clients", b =>
                {
                    b.Navigation("Projects");
                });

            modelBuilder.Entity("Employee_Management_API.Models.Domains", b =>
                {
                    b.Navigation("Data");

                    b.Navigation("Departments");

                    b.Navigation("TopicDomains");
                });

            modelBuilder.Entity("Employee_Management_API.Models.EmployeeData", b =>
                {
                    b.Navigation("Employee_Roles");

                    b.Navigation("ProjectsTL");
                });

            modelBuilder.Entity("Employee_Management_API.Models.ProjectData", b =>
                {
                    b.Navigation("ProjectEmployees");

                    b.Navigation("ProjectsTLs");
                });

            modelBuilder.Entity("Employee_Management_API.Models.Roles", b =>
                {
                    b.Navigation("Employee_Roles");
                });

            modelBuilder.Entity("Employee_Management_API.Models.Topic", b =>
                {
                    b.Navigation("TopicDomains");
                });
#pragma warning restore 612, 618
        }
    }
}
